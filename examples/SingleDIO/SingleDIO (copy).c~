/*****************************************************************************/
/*                    Single digital input example                           */
/*                                                                           */
/*  This example shows how to use the powerdaq API to perform a single       */
/*  digital acquisition with a PD2-DIO boards.                               */
/*  The acquisition is performed in a software timed fashion that is         */
/*  appropriate for slow speed acquisition (up to 500Hz).                    */
/*  This example only works on PD2-DIO boards.                               */
/*  For the PDx-MFx and PD2-AO boards look at the SingleDI and SingleDO      */
/*  examples.                                                                */
/*                                                                           */
/*---------------------------------------------------------------------------*/
/*      Copyright (C) 2001 United Electronic Industries, Inc.                */
/*      All rights reserved.                                                 */
/*---------------------------------------------------------------------------*/
/*                                                                           */ 
/*****************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <sys/types.h>
#include <unistd.h>
#include <signal.h>
#include "win_sdk_types.h"
#include "powerdaq.h"
#include "powerdaq32.h"

#include "ParseParams.h"


typedef enum _state
{
   closed,
   unconfigured,
   configured,
   running
} tState;

typedef struct _singleDioData
{
   int board;                    // board number to be used for the AI operation
   int handle;                   // board handle
   int nbOfPorts;                // nb of ports of 16 lines to use
   unsigned char OutPorts;       // mask for ports of 16 lines to use for output
   int nbOfSamplesPerPort;       // number of samples per port
   unsigned long portList[64];
   double scanRate;              // sampling frequency on each port
   tState state;                 // state of the acquisition session
} tSingleDioData;


int InitSingleDIO(tSingleDioData *pDioData);
int SingleDIO(tSingleDioData *pDioData);
void CleanUpSingleDIO(tSingleDioData *pDioData);


static tSingleDioData G_DioData;

// exit handler
void SingleDIOExitHandler(int status, void *arg)
{
   CleanUpSingleDIO((tSingleDioData *)arg);
}


int InitSingleDIO(tSingleDioData *pDioData)
{
   Adapter_Info adaptInfo;
   int retVal = 0;

   // get adapter type
   retVal = _PdGetAdapterInfo(pDioData->board, &adaptInfo);
   if (retVal < 0)
   {
      printf("SingleDIO: _PdGetAdapterInfo error %d\n", retVal);
      fprintf(f,"SingleDIO: _PdGetAdapterInfo error %d\n", retVal);
      system ("dialog --title 'ERROR: DIO Test' --msgbox 'No adapter detected error!\n\nPress enter to continue.' 10 25");     //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      exit(EXIT_FAILURE);
   }

   if(adaptInfo.atType & atPD2DIO)
      printf("This is a PD2-DIO board\n");
      fprintf(f,"This is a PD2-DIO board\n");
   else
   {
      printf("This board is not a PD2-DIO\n");
      fprintf(f,"This board is not a PD2-DIO\n");
      system ("dialog --title 'ERROR: DIO Test' --msgbox 'This is not a PD2-DIO adapter error!\n\nPress enter to continue.' 10 25");     //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      exit(EXIT_FAILURE);
   }

   pDioData->handle = PdAcquireSubsystem(pDioData->board, DigitalIn, 1);
   if(pDioData->handle < 0)
   {
      printf("SingleDIO: PdAcquireSubsystem failed\n");
      fprintf(f,"SingleDIO: PdAcquireSubsystem failed\n");
      system ("dialog --title 'ERROR: DIO Test' --msgbox 'Can't recognize adapter error!\n\nPress enter to continue.' 10 25");     //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      exit(EXIT_FAILURE);
   }

   pDioData->state = unconfigured;

   retVal = _PdDIOReset(pDioData->handle);
   if (retVal < 0)
   {
      printf("SingleDIO: PdDInReset error %d\n", retVal);
      fprintf(f,"SingleDIO: PdDInReset error %d\n", retVal);
      system ("dialog --title 'ERROR: DIO Test' --msgbox 'Adapter reset error!\n\nPress enter to continue.' 10 25");     //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      exit(EXIT_FAILURE);
   }

   return 0;
}


int SingleDIO(tSingleDioData *pDioData)
{
   int retVal;
   int i, j;
   DWORD readVal, writeVal;
   int count = 0;

   FILE *f = fopen("log_DIO_Test.txt","w");
   if (f == NULL) {
        printf("Error opening file!\n");
        system ("dialog --title 'ERROR: DIO Test' --msgbox 'Error opening log file!\n\nNo log will be generated.\n\nPress enter to continue.' 10 25");     //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        exit(1);
   }

   retVal = _PdDIOEnableOutput(pDioData->handle, pDioData->OutPorts);
   if(retVal < 0)
   {
      printf("SingleDIO: _PdDioEnableOutput failed\n");
      fprintf(f,"SingleDIO: _PdDioEnableOutput failed\n");
      system ("dialog --title 'ERROR: DIO Test' --msgbox 'Output not enabled error!\n\nPress enter to continue.' 10 25");     //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      exit(EXIT_FAILURE);
   }
   
   pDioData->state = configured;

   
   pDioData->state = running;

   //write 0 to all 4 DIO lines to make sure all DO ports are off (start at 0)

   for(j=0;j<pDioData->OutPorts;j++)
   {
      retVal = _PdDIOWrite(pDioData->handle, j, 0);
   }

   for(i=0; i<pDioData->nbOfSamplesPerPort; i++)
   {
      for(j=0; j<pDioData->OutPorts; j++)
      {
         if(count < pDioData->nbOfSamplesPerPort)
         {
            writeVal = count;
            retVal = _PdDIOWrite(pDioData->handle, j, writeVal);
            if(retVal < 0)
            {
               printf("SingleDIO: _PdDIOWrite error: %d\n", retVal);
               fprintf(f,"SingleDIO: _PdDIOWrite error: %d\n", retVal);
               system ("dialog --title 'ERROR: DIO Test' --msgbox 'Write error!\n\nPress enter to continue.' 10 25");     //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
               exit(EXIT_FAILURE);
            }
            printf("Port %d Value Write: 0x%x\n", j,writeVal);
         }
         else
         {
            count=0;
         }
         usleep(1000);
         retVal = _PdDIORead(pDioData->handle, j, &readVal);
         if(retVal < 0)
         {
            printf("SingleDIO: _PdDIORead error: %d\n", retVal);
            fprintf(f,"SingleDIO: _PdDIORead error: %d\n", retVal);
            system ("dialog --title 'ERROR: DIO Test' --msgbox 'Read error!\n\nPress enter to continue.' 10 25");     //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            exit(EXIT_FAILURE);
         }

         printf("Port %d Value Read: 0x%x\n",j, readVal);

         if(readVal != writeVal)
         {
            fprintf(f,"FAIL - Port %d, Value Wrote: 0x%x, Value Read: 0x%x\n", j, writeVal, readVal);
         }

      }

      count++;
      printf("\n");

      usleep(1.0E6/pDioData->scanRate);
   }

   return retVal;
}


void CleanUpSingleDIO(tSingleDioData *pDioData)
{
   int retVal;
      
   if(pDioData->state == running)
   {
      pDioData->state = configured;
   }

   if(pDioData->state == configured)
   {
      retVal = _PdDIOReset(pDioData->handle);
      if (retVal < 0)
         printf("SingleDI: _PdDIOReset error %d\n", retVal);
         fprintf(f,"SingleDIO: PdDInReset error %d\n", retVal);
         system ("dialog --title 'ERROR: DIO Test' --msgbox 'Adapter reset error!\n\nPress enter to continue.' 10 25");     //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

      pDioData->state = unconfigured;
   }

   if(pDioData->handle > 0 && pDioData->state == unconfigured)
   {
      retVal = PdAcquireSubsystem(pDioData->handle, DigitalIn, 0);
      if (retVal < 0)
         printf("SingleDI: PdReleaseSubsystem error %d\n", retVal);
         fprintf(f,"SingleDI: PdReleaseSubsystem error %d\n", retVal);
         system ("dialog --title 'ERROR: DIO Test' --msgbox 'Can't close adapter error!\n\nPress enter to continue.' 10 25");     //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   }

   pDioData->state = closed;
}


int main(int argc, char *argv[])
{
   int i;
   PD_PARAMS params = {0, 4, {0,1,2,3}, 5.0, 0};
   
   ParseParameters(argc, argv, &params);

   int statusStart = system ("dialog --title 'PD2-DIO-128I/MT Test' --yesno 'Begin DIO test?' 10 25");     //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

if(statusStart==0) {
   // initializes acquisition session parameters
   G_DioData.board = params.board;
   G_DioData.nbOfPorts = params.numChannels;
   for(i=0; i<params.numChannels; i++)
   {
       G_DioData.portList[i] = params.channels[i];
   }

   G_DioData.handle = 0;
   G_DioData.OutPorts = params.numChannels; // use ports 1 and 2 for output
   G_DioData.nbOfSamplesPerPort = 65536;
   G_DioData.scanRate = params.frequency;
   G_DioData.state = closed;

   // setup exit handler that will clean-up the acquisition session
   // if an error occurs
   on_exit(SingleDIOExitHandler, &G_DioData);

   InitSingleDIO(&G_DioData);

   // run the acquisition
   SingleDIO(&G_DioData);

   // Cleanup acquisition
   CleanUpSingleDIO(&G_DioData);
   if(f){fclose(f);}

   system ("dialog --title 'DIO Test' --msgbox 'Test complete.\n\nLog generated: log.txt' 10 25");     //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

}
 
   else if(statusStart==1) {
       system ("dialog --title 'DIO Test' --msgbox 'Test not run.\n\nNo log generated.\n\nPress enter to quit.' 10 25");     //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
}
   system("clear");
   return 0;
}

